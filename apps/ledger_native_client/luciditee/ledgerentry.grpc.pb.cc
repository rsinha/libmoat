// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ledgerentry.proto

#include "ledgerentry.pb.h"
#include "ledgerentry.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace luciditee {

static const char* LedgerService_method_names[] = {
  "/luciditee.LedgerService/entry",
  "/luciditee.LedgerService/query",
  "/luciditee.LedgerService/info",
};

std::unique_ptr< LedgerService::Stub> LedgerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LedgerService::Stub> stub(new LedgerService::Stub(channel));
  return stub;
}

LedgerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_entry_(LedgerService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_query_(LedgerService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_info_(LedgerService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LedgerService::Stub::entry(::grpc::ClientContext* context, const ::luciditee::LedgerEntry& request, ::luciditee::LedgerEntryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_entry_, context, request, response);
}

void LedgerService::Stub::experimental_async::entry(::grpc::ClientContext* context, const ::luciditee::LedgerEntry* request, ::luciditee::LedgerEntryResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_entry_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::luciditee::LedgerEntryResponse>* LedgerService::Stub::AsyncentryRaw(::grpc::ClientContext* context, const ::luciditee::LedgerEntry& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::luciditee::LedgerEntryResponse>::Create(channel_.get(), cq, rpcmethod_entry_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::luciditee::LedgerEntryResponse>* LedgerService::Stub::PrepareAsyncentryRaw(::grpc::ClientContext* context, const ::luciditee::LedgerEntry& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::luciditee::LedgerEntryResponse>::Create(channel_.get(), cq, rpcmethod_entry_, context, request, false);
}

::grpc::Status LedgerService::Stub::query(::grpc::ClientContext* context, const ::luciditee::LedgerQueryRequest& request, ::luciditee::LedgerQueryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_query_, context, request, response);
}

void LedgerService::Stub::experimental_async::query(::grpc::ClientContext* context, const ::luciditee::LedgerQueryRequest* request, ::luciditee::LedgerQueryResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_query_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::luciditee::LedgerQueryResponse>* LedgerService::Stub::AsyncqueryRaw(::grpc::ClientContext* context, const ::luciditee::LedgerQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::luciditee::LedgerQueryResponse>::Create(channel_.get(), cq, rpcmethod_query_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::luciditee::LedgerQueryResponse>* LedgerService::Stub::PrepareAsyncqueryRaw(::grpc::ClientContext* context, const ::luciditee::LedgerQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::luciditee::LedgerQueryResponse>::Create(channel_.get(), cq, rpcmethod_query_, context, request, false);
}

::grpc::Status LedgerService::Stub::info(::grpc::ClientContext* context, const ::luciditee::BlockchainInfoRequest& request, ::luciditee::BlockchainInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_info_, context, request, response);
}

void LedgerService::Stub::experimental_async::info(::grpc::ClientContext* context, const ::luciditee::BlockchainInfoRequest* request, ::luciditee::BlockchainInfoResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_info_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::luciditee::BlockchainInfoResponse>* LedgerService::Stub::AsyncinfoRaw(::grpc::ClientContext* context, const ::luciditee::BlockchainInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::luciditee::BlockchainInfoResponse>::Create(channel_.get(), cq, rpcmethod_info_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::luciditee::BlockchainInfoResponse>* LedgerService::Stub::PrepareAsyncinfoRaw(::grpc::ClientContext* context, const ::luciditee::BlockchainInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::luciditee::BlockchainInfoResponse>::Create(channel_.get(), cq, rpcmethod_info_, context, request, false);
}

LedgerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LedgerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LedgerService::Service, ::luciditee::LedgerEntry, ::luciditee::LedgerEntryResponse>(
          std::mem_fn(&LedgerService::Service::entry), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LedgerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LedgerService::Service, ::luciditee::LedgerQueryRequest, ::luciditee::LedgerQueryResponse>(
          std::mem_fn(&LedgerService::Service::query), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LedgerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LedgerService::Service, ::luciditee::BlockchainInfoRequest, ::luciditee::BlockchainInfoResponse>(
          std::mem_fn(&LedgerService::Service::info), this)));
}

LedgerService::Service::~Service() {
}

::grpc::Status LedgerService::Service::entry(::grpc::ServerContext* context, const ::luciditee::LedgerEntry* request, ::luciditee::LedgerEntryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LedgerService::Service::query(::grpc::ServerContext* context, const ::luciditee::LedgerQueryRequest* request, ::luciditee::LedgerQueryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LedgerService::Service::info(::grpc::ServerContext* context, const ::luciditee::BlockchainInfoRequest* request, ::luciditee::BlockchainInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace luciditee

