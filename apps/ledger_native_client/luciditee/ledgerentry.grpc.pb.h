// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ledgerentry.proto
#ifndef GRPC_ledgerentry_2eproto__INCLUDED
#define GRPC_ledgerentry_2eproto__INCLUDED

#include "ledgerentry.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace luciditee {

class LedgerService final {
 public:
  static constexpr char const* service_full_name() {
    return "luciditee.LedgerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Define a RPC operation
    virtual ::grpc::Status entry(::grpc::ClientContext* context, const ::luciditee::LedgerEntry& request, ::luciditee::LedgerEntryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::luciditee::LedgerEntryResponse>> Asyncentry(::grpc::ClientContext* context, const ::luciditee::LedgerEntry& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::luciditee::LedgerEntryResponse>>(AsyncentryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::luciditee::LedgerEntryResponse>> PrepareAsyncentry(::grpc::ClientContext* context, const ::luciditee::LedgerEntry& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::luciditee::LedgerEntryResponse>>(PrepareAsyncentryRaw(context, request, cq));
    }
    virtual ::grpc::Status query(::grpc::ClientContext* context, const ::luciditee::LedgerQueryRequest& request, ::luciditee::LedgerQueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::luciditee::LedgerQueryResponse>> Asyncquery(::grpc::ClientContext* context, const ::luciditee::LedgerQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::luciditee::LedgerQueryResponse>>(AsyncqueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::luciditee::LedgerQueryResponse>> PrepareAsyncquery(::grpc::ClientContext* context, const ::luciditee::LedgerQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::luciditee::LedgerQueryResponse>>(PrepareAsyncqueryRaw(context, request, cq));
    }
    virtual ::grpc::Status info(::grpc::ClientContext* context, const ::luciditee::BlockchainInfoRequest& request, ::luciditee::BlockchainInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::luciditee::BlockchainInfoResponse>> Asyncinfo(::grpc::ClientContext* context, const ::luciditee::BlockchainInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::luciditee::BlockchainInfoResponse>>(AsyncinfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::luciditee::BlockchainInfoResponse>> PrepareAsyncinfo(::grpc::ClientContext* context, const ::luciditee::BlockchainInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::luciditee::BlockchainInfoResponse>>(PrepareAsyncinfoRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Define a RPC operation
      virtual void entry(::grpc::ClientContext* context, const ::luciditee::LedgerEntry* request, ::luciditee::LedgerEntryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void query(::grpc::ClientContext* context, const ::luciditee::LedgerQueryRequest* request, ::luciditee::LedgerQueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void info(::grpc::ClientContext* context, const ::luciditee::BlockchainInfoRequest* request, ::luciditee::BlockchainInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::luciditee::LedgerEntryResponse>* AsyncentryRaw(::grpc::ClientContext* context, const ::luciditee::LedgerEntry& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::luciditee::LedgerEntryResponse>* PrepareAsyncentryRaw(::grpc::ClientContext* context, const ::luciditee::LedgerEntry& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::luciditee::LedgerQueryResponse>* AsyncqueryRaw(::grpc::ClientContext* context, const ::luciditee::LedgerQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::luciditee::LedgerQueryResponse>* PrepareAsyncqueryRaw(::grpc::ClientContext* context, const ::luciditee::LedgerQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::luciditee::BlockchainInfoResponse>* AsyncinfoRaw(::grpc::ClientContext* context, const ::luciditee::BlockchainInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::luciditee::BlockchainInfoResponse>* PrepareAsyncinfoRaw(::grpc::ClientContext* context, const ::luciditee::BlockchainInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status entry(::grpc::ClientContext* context, const ::luciditee::LedgerEntry& request, ::luciditee::LedgerEntryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::luciditee::LedgerEntryResponse>> Asyncentry(::grpc::ClientContext* context, const ::luciditee::LedgerEntry& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::luciditee::LedgerEntryResponse>>(AsyncentryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::luciditee::LedgerEntryResponse>> PrepareAsyncentry(::grpc::ClientContext* context, const ::luciditee::LedgerEntry& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::luciditee::LedgerEntryResponse>>(PrepareAsyncentryRaw(context, request, cq));
    }
    ::grpc::Status query(::grpc::ClientContext* context, const ::luciditee::LedgerQueryRequest& request, ::luciditee::LedgerQueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::luciditee::LedgerQueryResponse>> Asyncquery(::grpc::ClientContext* context, const ::luciditee::LedgerQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::luciditee::LedgerQueryResponse>>(AsyncqueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::luciditee::LedgerQueryResponse>> PrepareAsyncquery(::grpc::ClientContext* context, const ::luciditee::LedgerQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::luciditee::LedgerQueryResponse>>(PrepareAsyncqueryRaw(context, request, cq));
    }
    ::grpc::Status info(::grpc::ClientContext* context, const ::luciditee::BlockchainInfoRequest& request, ::luciditee::BlockchainInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::luciditee::BlockchainInfoResponse>> Asyncinfo(::grpc::ClientContext* context, const ::luciditee::BlockchainInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::luciditee::BlockchainInfoResponse>>(AsyncinfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::luciditee::BlockchainInfoResponse>> PrepareAsyncinfo(::grpc::ClientContext* context, const ::luciditee::BlockchainInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::luciditee::BlockchainInfoResponse>>(PrepareAsyncinfoRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void entry(::grpc::ClientContext* context, const ::luciditee::LedgerEntry* request, ::luciditee::LedgerEntryResponse* response, std::function<void(::grpc::Status)>) override;
      void query(::grpc::ClientContext* context, const ::luciditee::LedgerQueryRequest* request, ::luciditee::LedgerQueryResponse* response, std::function<void(::grpc::Status)>) override;
      void info(::grpc::ClientContext* context, const ::luciditee::BlockchainInfoRequest* request, ::luciditee::BlockchainInfoResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::luciditee::LedgerEntryResponse>* AsyncentryRaw(::grpc::ClientContext* context, const ::luciditee::LedgerEntry& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::luciditee::LedgerEntryResponse>* PrepareAsyncentryRaw(::grpc::ClientContext* context, const ::luciditee::LedgerEntry& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::luciditee::LedgerQueryResponse>* AsyncqueryRaw(::grpc::ClientContext* context, const ::luciditee::LedgerQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::luciditee::LedgerQueryResponse>* PrepareAsyncqueryRaw(::grpc::ClientContext* context, const ::luciditee::LedgerQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::luciditee::BlockchainInfoResponse>* AsyncinfoRaw(::grpc::ClientContext* context, const ::luciditee::BlockchainInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::luciditee::BlockchainInfoResponse>* PrepareAsyncinfoRaw(::grpc::ClientContext* context, const ::luciditee::BlockchainInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_entry_;
    const ::grpc::internal::RpcMethod rpcmethod_query_;
    const ::grpc::internal::RpcMethod rpcmethod_info_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Define a RPC operation
    virtual ::grpc::Status entry(::grpc::ServerContext* context, const ::luciditee::LedgerEntry* request, ::luciditee::LedgerEntryResponse* response);
    virtual ::grpc::Status query(::grpc::ServerContext* context, const ::luciditee::LedgerQueryRequest* request, ::luciditee::LedgerQueryResponse* response);
    virtual ::grpc::Status info(::grpc::ServerContext* context, const ::luciditee::BlockchainInfoRequest* request, ::luciditee::BlockchainInfoResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_entry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_entry() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_entry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status entry(::grpc::ServerContext* context, const ::luciditee::LedgerEntry* request, ::luciditee::LedgerEntryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestentry(::grpc::ServerContext* context, ::luciditee::LedgerEntry* request, ::grpc::ServerAsyncResponseWriter< ::luciditee::LedgerEntryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_query() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status query(::grpc::ServerContext* context, const ::luciditee::LedgerQueryRequest* request, ::luciditee::LedgerQueryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestquery(::grpc::ServerContext* context, ::luciditee::LedgerQueryRequest* request, ::grpc::ServerAsyncResponseWriter< ::luciditee::LedgerQueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_info() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status info(::grpc::ServerContext* context, const ::luciditee::BlockchainInfoRequest* request, ::luciditee::BlockchainInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinfo(::grpc::ServerContext* context, ::luciditee::BlockchainInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::luciditee::BlockchainInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_entry<WithAsyncMethod_query<WithAsyncMethod_info<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_entry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_entry() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::luciditee::LedgerEntry, ::luciditee::LedgerEntryResponse>(
          [this](::grpc::ServerContext* context,
                 const ::luciditee::LedgerEntry* request,
                 ::luciditee::LedgerEntryResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->entry(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_entry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status entry(::grpc::ServerContext* context, const ::luciditee::LedgerEntry* request, ::luciditee::LedgerEntryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void entry(::grpc::ServerContext* context, const ::luciditee::LedgerEntry* request, ::luciditee::LedgerEntryResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_query() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::luciditee::LedgerQueryRequest, ::luciditee::LedgerQueryResponse>(
          [this](::grpc::ServerContext* context,
                 const ::luciditee::LedgerQueryRequest* request,
                 ::luciditee::LedgerQueryResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->query(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status query(::grpc::ServerContext* context, const ::luciditee::LedgerQueryRequest* request, ::luciditee::LedgerQueryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void query(::grpc::ServerContext* context, const ::luciditee::LedgerQueryRequest* request, ::luciditee::LedgerQueryResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_info() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::luciditee::BlockchainInfoRequest, ::luciditee::BlockchainInfoResponse>(
          [this](::grpc::ServerContext* context,
                 const ::luciditee::BlockchainInfoRequest* request,
                 ::luciditee::BlockchainInfoResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->info(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status info(::grpc::ServerContext* context, const ::luciditee::BlockchainInfoRequest* request, ::luciditee::BlockchainInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void info(::grpc::ServerContext* context, const ::luciditee::BlockchainInfoRequest* request, ::luciditee::BlockchainInfoResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_entry<ExperimentalWithCallbackMethod_query<ExperimentalWithCallbackMethod_info<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_entry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_entry() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_entry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status entry(::grpc::ServerContext* context, const ::luciditee::LedgerEntry* request, ::luciditee::LedgerEntryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_query() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status query(::grpc::ServerContext* context, const ::luciditee::LedgerQueryRequest* request, ::luciditee::LedgerQueryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_info() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status info(::grpc::ServerContext* context, const ::luciditee::BlockchainInfoRequest* request, ::luciditee::BlockchainInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_entry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_entry() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_entry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status entry(::grpc::ServerContext* context, const ::luciditee::LedgerEntry* request, ::luciditee::LedgerEntryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestentry(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_query() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status query(::grpc::ServerContext* context, const ::luciditee::LedgerQueryRequest* request, ::luciditee::LedgerQueryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestquery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_info() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status info(::grpc::ServerContext* context, const ::luciditee::BlockchainInfoRequest* request, ::luciditee::BlockchainInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_entry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_entry() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->entry(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_entry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status entry(::grpc::ServerContext* context, const ::luciditee::LedgerEntry* request, ::luciditee::LedgerEntryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void entry(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_query() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->query(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status query(::grpc::ServerContext* context, const ::luciditee::LedgerQueryRequest* request, ::luciditee::LedgerQueryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void query(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_info() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->info(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status info(::grpc::ServerContext* context, const ::luciditee::BlockchainInfoRequest* request, ::luciditee::BlockchainInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void info(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_entry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_entry() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::luciditee::LedgerEntry, ::luciditee::LedgerEntryResponse>(std::bind(&WithStreamedUnaryMethod_entry<BaseClass>::Streamedentry, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_entry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status entry(::grpc::ServerContext* context, const ::luciditee::LedgerEntry* request, ::luciditee::LedgerEntryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedentry(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::luciditee::LedgerEntry,::luciditee::LedgerEntryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_query() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::luciditee::LedgerQueryRequest, ::luciditee::LedgerQueryResponse>(std::bind(&WithStreamedUnaryMethod_query<BaseClass>::Streamedquery, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status query(::grpc::ServerContext* context, const ::luciditee::LedgerQueryRequest* request, ::luciditee::LedgerQueryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedquery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::luciditee::LedgerQueryRequest,::luciditee::LedgerQueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_info() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::luciditee::BlockchainInfoRequest, ::luciditee::BlockchainInfoResponse>(std::bind(&WithStreamedUnaryMethod_info<BaseClass>::Streamedinfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status info(::grpc::ServerContext* context, const ::luciditee::BlockchainInfoRequest* request, ::luciditee::BlockchainInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedinfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::luciditee::BlockchainInfoRequest,::luciditee::BlockchainInfoResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_entry<WithStreamedUnaryMethod_query<WithStreamedUnaryMethod_info<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_entry<WithStreamedUnaryMethod_query<WithStreamedUnaryMethod_info<Service > > > StreamedService;
};

}  // namespace luciditee


#endif  // GRPC_ledgerentry_2eproto__INCLUDED
