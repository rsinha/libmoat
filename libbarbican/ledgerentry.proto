syntax = "proto2";

package luciditee;

message Ledger {
    message Block {
        required uint64 height = 1;
        required bytes content = 2;
    }
    repeated Block blocks = 1;
}

message Specification {
    required uint64 id = 1;
    enum Type {
        FILE = 0;
        KVS = 1;
    }

    message InputDescription {
        required string input_name = 1;
        required Type type = 2;
    }
    repeated InputDescription inputs = 2;

    message OutputDescription {
        required string output_name = 1;
        required Type type = 2;
    }
    repeated OutputDescription outputs = 3;

    message StateDescription {
        required string state_name = 1;
        required Type type = 2;
    }
    repeated StateDescription statevars = 4;
}

message Record {
    required uint64 id = 1;
    required uint64 t = 2;

    message NamedDigest {
        required string name = 1;
        required bytes digest = 2;
    }
    repeated NamedDigest inputs = 3;
    repeated NamedDigest outputs = 4;
    repeated NamedDigest statevars = 5;
    optional bytes signatures = 6;
}

message Delivery {
    required uint64 id = 1;
    required uint64 t = 2;

    required bytes encrypted_key = 3;
}

message LedgerEntry {
    enum EntryType {
        CREATE = 0;
        RECORD = 1;
        DELIVER = 2;
    }
    required EntryType type = 1;
    oneof entry {
        Specification spec = 2;
        Record record = 3;
        Delivery delivery = 4;
    }
}

message LedgerEntryResponse {
    required string message = 1;
    required LedgerEntry.EntryType type = 2;
    required uint64 entryId = 3;

}

message LedgerQueryRequest {
    required LedgerEntry.EntryType type = 1;
    required uint64 entryId = 2;
}

message LedgerQueryResponse {
    required uint64 entryId = 2;
    repeated LedgerEntry entries = 3;
}

message BlockchainInfoRequest {
    required string chaincode = 1;
}

message BlockchainInfoResponse {
    required uint64 height = 1;
    required string currentBlockHash = 2;
    required string previousBlockHash = 3;
}

service LedgerService {
    // Define a RPC operation
    rpc entry(LedgerEntry) returns (LedgerEntryResponse);
    rpc query(LedgerQueryRequest) returns(LedgerQueryResponse);
    rpc info(BlockchainInfoRequest) returns(BlockchainInfoResponse);
}
